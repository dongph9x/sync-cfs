---
export interface Props {
    posts: any[];
    postsPerPage?: number;
}

const { posts, postsPerPage = 20 } = Astro.props;
const totalPosts = posts.length;
const totalPages = Math.ceil(totalPosts / postsPerPage);
---

<div id="pagination-container" data-posts={JSON.stringify(posts)} data-posts-per-page={postsPerPage}>
    <!-- Posts will be rendered here by JavaScript -->
    <div id="posts-container" class="space-y-6">
        <!-- Initial posts loaded by JavaScript -->
    </div>
    
    <!-- Pagination controls -->
    {totalPages > 1 && (
        <div class="flex flex-col sm:flex-row justify-between items-center space-y-4 sm:space-y-0 mt-8 pt-6 border-t border-stack-gray-200">
            <!-- Results info -->
            <div id="results-info" class="text-sm text-stack-gray-600">
                <!-- Populated by JavaScript -->
            </div>
            
            <!-- Pagination controls -->
            <nav id="pagination-nav" class="flex items-center space-x-1" aria-label="Pagination">
                <!-- Populated by JavaScript -->
            </nav>
        </div>
    )}
</div>

<script is:inline>
class PaginationController {
    constructor() {
        this.container = document.getElementById('pagination-container');
        if (!this.container) return;
        
        this.posts = JSON.parse(this.container.dataset.posts || '[]');
        this.postsPerPage = parseInt(this.container.dataset.postsPerPage || '20');
        this.currentPage = this.getPageFromURL();
        this.totalPages = Math.ceil(this.posts.length / this.postsPerPage);
        
        this.postsContainer = document.getElementById('posts-container');
        this.resultsInfo = document.getElementById('results-info');
        this.paginationNav = document.getElementById('pagination-nav');
        
        if (this.posts.length > 0) {
            this.render();
            this.updateURL(this.currentPage);
            
            // Listen for browser back/forward
            window.addEventListener('popstate', () => {
                this.currentPage = this.getPageFromURL();
                this.render();
            });
        }
    }
    
    getPageFromURL() {
        const params = new URLSearchParams(window.location.search);
        const page = parseInt(params.get('page') || '1');
        return Math.max(1, Math.min(page, this.totalPages));
    }
    
    updateURL(page) {
        const url = new URL(window.location.href);
        if (page === 1) {
            url.searchParams.delete('page');
        } else {
            url.searchParams.set('page', page.toString());
        }
        window.history.pushState({}, '', url.toString());
    }
    
    render() {
        this.renderPosts();
        this.renderResultsInfo();
        this.renderPaginationNav();
    }
    
    renderPosts() {
        const startIndex = (this.currentPage - 1) * this.postsPerPage;
        const endIndex = startIndex + this.postsPerPage;
        const currentPosts = this.posts.slice(startIndex, endIndex);
        
        this.postsContainer.innerHTML = currentPosts.map(post => this.renderPost(post)).join('');
    }
    
    renderPost(post) {
        const createdAt = new Date(post.created_at).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
        
        return `
            <div class="bg-white border border-stack-gray-200 rounded-lg p-6 hover:border-stack-gray-300 transition-colors">
                <div class="flex items-start space-x-4">
                    <div class="flex-shrink-0">
                        <div class="w-10 h-10 bg-stack-blue text-white rounded-full flex items-center justify-center text-sm font-medium">
                            ${post.author_alias.substring(0, 2).toUpperCase()}
                        </div>
                    </div>
                    <div class="flex-1 min-w-0">
                        <div class="flex items-center space-x-2 mb-2">
                            <span class="text-sm font-medium text-stack-gray-900">${post.author_alias}</span>
                            <time class="text-xs text-stack-gray-500" datetime="${post.created_at}">
                                ${createdAt}
                            </time>
                        </div>
                        ${post.reply_to_id ? `
                            <div class="mb-3 p-3 bg-stack-gray-50 border-l-4 border-stack-blue rounded">
                                <div class="text-xs text-stack-gray-600 mb-1">
                                    <span class="font-medium">Replying to:</span> ${post.reply_to_author_alias || 'Unknown'}
                                </div>
                            </div>
                        ` : ''}
                        <div class="prose prose-sm max-w-none">
                            ${post.body_html || '<p class="text-stack-gray-500 italic">No content</p>'}
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    renderResultsInfo() {
        const startItem = (this.currentPage - 1) * this.postsPerPage + 1;
        const endItem = Math.min(this.currentPage * this.postsPerPage, this.posts.length);
        
        this.resultsInfo.innerHTML = `
            Showing <span class="font-medium">${startItem}</span> to <span class="font-medium">${endItem}</span> of 
            <span class="font-medium">${this.posts.length}</span> replies
        `;
    }
    
    renderPaginationNav() {
        if (this.totalPages <= 1) {
            this.paginationNav.innerHTML = '';
            return;
        }
        
        const pageNumbers = this.generatePageNumbers();
        
        let html = '';
        
        // Previous button
        if (this.currentPage > 1) {
            html += `
                <button onclick="pagination.goToPage(${this.currentPage - 1})" 
                        class="inline-flex items-center px-3 py-2 text-sm font-medium text-stack-gray-500 bg-white border border-stack-gray-300 rounded-l-md hover:bg-stack-gray-50 hover:text-stack-gray-700 transition-colors">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                    </svg>
                    Previous
                </button>
            `;
        } else {
            html += `
                <span class="inline-flex items-center px-3 py-2 text-sm font-medium text-stack-gray-300 bg-stack-gray-100 border border-stack-gray-300 rounded-l-md cursor-not-allowed">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                    </svg>
                    Previous
                </span>
            `;
        }
        
        // Page numbers
        pageNumbers.forEach(pageNum => {
            if (pageNum === '...') {
                html += `
                    <span class="inline-flex items-center px-3 py-2 text-sm font-medium text-stack-gray-500 bg-white border border-stack-gray-300">
                        ...
                    </span>
                `;
            } else if (pageNum === this.currentPage) {
                html += `
                    <span class="inline-flex items-center px-3 py-2 text-sm font-medium text-white bg-stack-blue border border-stack-blue">
                        ${pageNum}
                    </span>
                `;
            } else {
                html += `
                    <button onclick="pagination.goToPage(${pageNum})" 
                            class="inline-flex items-center px-3 py-2 text-sm font-medium text-stack-gray-500 bg-white border border-stack-gray-300 hover:bg-stack-gray-50 hover:text-stack-gray-700 transition-colors">
                        ${pageNum}
                    </button>
                `;
            }
        });
        
        // Next button
        if (this.currentPage < this.totalPages) {
            html += `
                <button onclick="pagination.goToPage(${this.currentPage + 1})" 
                        class="inline-flex items-center px-3 py-2 text-sm font-medium text-stack-gray-500 bg-white border border-stack-gray-300 rounded-r-md hover:bg-stack-gray-50 hover:text-stack-gray-700 transition-colors">
                    Next
                    <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                </button>
            `;
        } else {
            html += `
                <span class="inline-flex items-center px-3 py-2 text-sm font-medium text-stack-gray-300 bg-stack-gray-100 border border-stack-gray-300 rounded-r-md cursor-not-allowed">
                    Next
                    <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                </span>
            `;
        }
        
        this.paginationNav.innerHTML = html;
    }
    
    generatePageNumbers() {
        if (this.totalPages <= 7) {
            return Array.from({ length: this.totalPages }, (_, i) => i + 1);
        }
        
        const pages = [];
        
        // Always show first page
        pages.push(1);
        
        if (this.currentPage <= 4) {
            // Show 1, 2, 3, 4, 5, ..., last
            for (let i = 2; i <= Math.min(5, this.totalPages - 1); i++) {
                pages.push(i);
            }
            if (this.totalPages > 5) {
                pages.push('...');
            }
        } else if (this.currentPage >= this.totalPages - 3) {
            // Show 1, ..., last-4, last-3, last-2, last-1, last
            pages.push('...');
            for (let i = Math.max(2, this.totalPages - 4); i <= this.totalPages - 1; i++) {
                pages.push(i);
            }
        } else {
            // Show 1, ..., current-1, current, current+1, ..., last
            pages.push('...');
            for (let i = this.currentPage - 1; i <= this.currentPage + 1; i++) {
                pages.push(i);
            }
            pages.push('...');
        }
        
        // Always show last page (if not already added)
        if (this.totalPages > 1) {
            pages.push(this.totalPages);
        }
        
        return pages;
    }
    
    goToPage(page) {
        this.currentPage = Math.max(1, Math.min(page, this.totalPages));
        this.render();
        this.updateURL(this.currentPage);
        
        // Scroll to top of posts
        this.postsContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
}

// Initialize pagination when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.pagination = new PaginationController();
});
</script>
